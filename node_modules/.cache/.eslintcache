[{"E:\\twinkle\\appcode\\e-commerce\\src\\index.js":"1","E:\\twinkle\\appcode\\e-commerce\\src\\reportWebVitals.js":"2","E:\\twinkle\\appcode\\e-commerce\\src\\App.js":"3","E:\\twinkle\\appcode\\e-commerce\\src\\UserContext.js":"4","E:\\twinkle\\appcode\\e-commerce\\src\\Dashboard.js":"5","E:\\twinkle\\appcode\\e-commerce\\src\\NoMatchPage.js":"6","E:\\twinkle\\appcode\\e-commerce\\src\\Register.js":"7","E:\\twinkle\\appcode\\e-commerce\\src\\Login.js":"8","E:\\twinkle\\appcode\\e-commerce\\src\\Navbar.js":"9","E:\\twinkle\\appcode\\e-commerce\\src\\Service.js":"10","E:\\twinkle\\appcode\\e-commerce\\src\\Order.js":"11","E:\\twinkle\\appcode\\e-commerce\\src\\Store.js":"12","E:\\twinkle\\appcode\\e-commerce\\src\\Product.js":"13","E:\\twinkle\\appcode\\e-commerce\\src\\ProductList.jsx":"14"},{"size":535,"mtime":1674284541490,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1674284541825,"results":"17","hashOfConfig":"16"},{"size":1043,"mtime":1682780654658,"results":"18","hashOfConfig":"16"},{"size":80,"mtime":1680268139148,"results":"19","hashOfConfig":"16"},{"size":6828,"mtime":1683126683399,"results":"20","hashOfConfig":"16"},{"size":134,"mtime":1679503451601,"results":"21","hashOfConfig":"16"},{"size":15938,"mtime":1682780238824,"results":"22","hashOfConfig":"16"},{"size":6500,"mtime":1683041615629,"results":"23","hashOfConfig":"16"},{"size":1276,"mtime":1683127055711,"results":"24","hashOfConfig":"16"},{"size":1710,"mtime":1682950237291,"results":"25","hashOfConfig":"16"},{"size":1929,"mtime":1683126651727,"results":"26","hashOfConfig":"16"},{"size":6977,"mtime":1683042428041,"results":"27","hashOfConfig":"16"},{"size":1666,"mtime":1683126954400,"results":"28","hashOfConfig":"16"},{"size":5154,"mtime":1683040341181,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"9h1iq9",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"33"},"E:\\twinkle\\appcode\\e-commerce\\src\\index.js",[],[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\reportWebVitals.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\App.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\UserContext.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Dashboard.js",["75","76"],[],"E:\\twinkle\\appcode\\e-commerce\\src\\NoMatchPage.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Register.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Login.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Navbar.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Service.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Order.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\Store.js",["77","78","79"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { uc } from \"./UserContext\";\r\nimport { useContext } from \"react\";\r\nimport { BrandsService, CategoriesService, ProductsService } from \"./Service\";\r\nimport Product from \"./Product\";\r\nconst Store = () => {\r\n  let ur = useContext(uc);\r\n  const [brands, setbrands] = useState([]);\r\n  const [products, setproducts] = useState([]);\r\n  const [categories, setcategories] = useState([]);\r\nconst [productsToShow,setProductsToShow] =useState([])\r\nconst [search,setSearch] = useState(\"\")\r\n  console.log(products);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      // get brands from db\r\n      let brandsResponse = await BrandsService.fetchBrands();\r\n      let brandsResponseBody = await brandsResponse.json();\r\n      brandsResponseBody.forEach((brand) => {\r\n        brand.isChecked = true;\r\n      });\r\n      setbrands(brandsResponseBody);\r\n      // get categories from db\r\n      let categoriesResponse = await CategoriesService.fetchCategories();\r\n      let categoriesResponseBody = await categoriesResponse.json();\r\n      categoriesResponseBody.forEach((category) => {\r\n        category.isChecked = true;\r\n      });\r\n      setcategories(categoriesResponseBody);\r\n\r\n      //get products from db\r\n\r\n      let productsResponse = await fetch(\r\n        `http://localhost:5500/products?productName_like=${search}`,\r\n        { method: \"GET\" }\r\n      );\r\n      let productsResponseBody = await productsResponse.json();\r\n      if (productsResponse.ok) {\r\n        productsResponseBody.forEach((product) => {\r\n          //set brand\r\n          product.brand = BrandsService.getBrandByBrandId(\r\n            brandsResponseBody,\r\n            product.brandId\r\n          );\r\n\r\n          //set category\r\n          product.category = CategoriesService.getCategoryByCategoryId(\r\n            categoriesResponseBody,\r\n            product.categoryId\r\n          );\r\n          product.isOrdered = false;\r\n        });\r\n        setproducts(productsResponseBody);\r\n        setProductsToShow(productsResponseBody);\r\n        \r\n        document.title = \"Store - eCommerce\";\r\n      }\r\n    })();\r\n  }, [search]);\r\n\r\n  let updateBrandIsChecked = (id) => {\r\n    let brandsData = brands.map((brd) => {\r\n      if (brd.id === id) brd.isChecked = !brd.isChecked;\r\n      return brd;\r\n    });\r\n    updateProductsToShow()\r\n    setbrands(brandsData);\r\n  };\r\n\r\n  let updateCategoryIsChecked = (id) => {\r\n    let categoryData = categories.map((cat) => {\r\n      if (cat.id === id) cat.isChecked = !cat.isChecked;\r\n      return cat;\r\n    });\r\n\r\n    setcategories(categoryData);\r\n    updateProductsToShow()\r\n\r\n  };\r\n\r\n// update products to show\r\n\r\nlet updateProductsToShow = ()=>{\r\n  setProductsToShow(\r\n    products\r\n    .filter((prod)=>{\r\n      return (\r\n        categories.filter((category)=> \r\n        category.id === prod.categoryId && category.isChecked===true).length > 0\r\n      )\r\n    })\r\n    .filter((prod) => {\r\n      return (\r\n        brands.filter(\r\n          (brand) => brand.id === prod.brandId && brand.isChecked\r\n        ).length > 0\r\n      );\r\n    })\r\n  )\r\n}\r\n\r\n// when user clicks on ADD TO CART BUTTON\r\n\r\nlet onAddToCartClick = (prod) => {\r\n  (async () => {\r\n    let newOrder = {\r\n      userId: ur.user.currentUserId,\r\n      productId: prod.id,\r\n      quantity: 1,\r\n      isPaymentCompleted: false,\r\n    };\r\n\r\n    let orderResponse = await fetch(`http://localhost:5500/orders`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(newOrder),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (orderResponse.ok) {\r\n      //isOrdered = true\r\n      let prods = products.map((p) => {\r\n        if (p.id === prod.id) {\r\n          p.isOrdered = true;\r\n        return p;\r\n        }\r\n      });\r\n\r\n   setproducts(products)\r\n   updateProductsToShow()\r\n    } else {\r\n      console.log(orderResponse);\r\n    }\r\n  })();\r\n};\r\n\r\n  return (\r\n    <div> \r\n    <div className=\"row py-3 header\"> \r\n      <div className=\"col-lg-3\"> \r\n        <h4> \r\n          <i className=\"fa fa-shopping-bag\"></i> Store{\" \"} \r\n          <span className=\"badge badge-secondary\"> \r\n            {productsToShow.length} \r\n          </span> \r\n        </h4> \r\n      </div> \r\n\r\n      <div className=\"col-lg-9\"> \r\n        <input \r\n          type=\"search\" \r\n          value={search} \r\n          placeholder=\"Search\" \r\n          className=\"form-control\" \r\n          autoFocus=\"autofucs\" \r\n          onChange={(event) => { \r\n            setSearch(event.target.value); \r\n          }} \r\n        /> \r\n      </div> \r\n    </div> \r\n\r\n    <div className=\"row\"> \r\n      <div className=\"col-lg-3 py-2\"> \r\n        <div className=\"my-2\"> \r\n          <h5>Brands</h5> \r\n          <ul className=\"list-group list-group-flush\"> \r\n            {brands.map((brand) => ( \r\n              <li className=\"list-group-item\" key={brand.id}> \r\n                <div className=\"form-check\"> \r\n                  <input \r\n                    type=\"checkbox\" \r\n                    className=\"form-check-input\" \r\n                    value=\"true\" \r\n                    checked={brand.isChecked} \r\n                    onChange={() => { \r\n                      updateBrandIsChecked(brand.id); \r\n                    }} \r\n                    id={`brand${brand.id}`} \r\n                  /> \r\n                  <label \r\n                    className=\"form-check-label\" \r\n                    htmlFor={`brand${brand.id}`} \r\n                  > \r\n                    {brand.brandName} \r\n                  </label> \r\n                </div> \r\n              </li> \r\n            ))} \r\n          </ul> \r\n        </div> \r\n\r\n        <div className=\"my-2\"> \r\n          <h5>Categories</h5> \r\n          <ul className=\"list-group list-group-flush\"> \r\n            {categories.map((category) => ( \r\n              <li className=\"list-group-item\" key={category.id}> \r\n                <div className=\"form-check\"> \r\n                  <input \r\n                    type=\"checkbox\" \r\n                    className=\"form-check-input\" \r\n                    value=\"true\" \r\n                    checked={category.isChecked} \r\n                    onChange={() => { \r\n                      updateCategoryIsChecked(category.id); \r\n                    }} \r\n                    id={`category${category.id}`} \r\n                  /> \r\n                  <label \r\n                    className=\"form-check-label\" \r\n                    htmlFor={`category${category.id}`} \r\n                  > \r\n                    {category.categoryName} \r\n                  </label> \r\n                </div> \r\n              </li> \r\n            ))} \r\n          </ul> \r\n        </div> \r\n      </div> \r\n      <div className=\"col-lg-9 py-2\"> \r\n        <div className=\"row\"> \r\n          {productsToShow.map((prod) => ( \r\n            <Product \r\n              key={prod.id} \r\n              product={prod} \r\n              onAddToCartClick={onAddToCartClick} \r\n            /> \r\n          ))} \r\n        </div> \r\n      </div> \r\n    </div> \r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n","E:\\twinkle\\appcode\\e-commerce\\src\\Product.js",[],[],"E:\\twinkle\\appcode\\e-commerce\\src\\ProductList.jsx",["80"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Product from \"./Product\";\r\nimport { BrandsService, CategoriesService, SortService } from \"./Service\";\r\n\r\nfunction ProductList() {\r\n  let [products, setProducts] = useState([]); // sorted product\r\n  let [originalProducts, setOriginalProducts] = useState([]);// data directly fetched from products\r\n  let [search, setSearch] = useState(\"\");// typed search\r\n  let [sortBy, setSortBy] = useState(\"productName\");\r\n  let [sortOrder, setSortOrder] = useState(\"ASC\"); //ASC or DESC\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      //request brand table\r\n      let brandsResponse = await BrandsService.fetchBrands();\r\n      let brandsResponseBody = await brandsResponse.json();\r\n\r\n      // category table\r\n      let categoryResponse = await CategoriesService.fetchCategories();\r\n      let categoryResponseBody = await categoryResponse.json();\r\n      // request product table\r\n      let productsResponse = await fetch(\r\n        `http://localhost:5500/products?productName_like=${search}`,\r\n        { method: \"GET\" }\r\n      )\r\n      let productsResponseBody = await productsResponse.json();\r\n\r\n      // set category property into each product\r\n        productsResponseBody.forEach(product=>{\r\n        product.category = CategoriesService.getCategoryByCategoryId(categoryResponseBody,product.categoryId)\r\n        product.brand=BrandsService.getBrandByBrandId(brandsResponseBody,product.brandId)\r\n      })\r\n      \r\n      setOriginalProducts(productsResponseBody);\r\n      setProducts(productsResponseBody);\r\n    })();\r\n  }, [search]);\r\n\r\n  //when the user clicks on a column name to sort\r\n\r\n  let onSortColumnNameClick=(e,columnName)=>{\r\n    e.preventDefault();\r\n    setSortBy(columnName)\r\n    let negatedSortOrder = sortOrder===\"ASC\"?(\"DESC\"):(\"ASC\")\r\n    setSortOrder(negatedSortOrder);\r\n    setProducts(\r\n      SortService.getSortedArray(originalProducts,columnName,negatedSortOrder)\r\n    )\r\n  }\r\n\r\n   //render column name\r\n\r\n     //render column name\r\n  let getColumnHeader = (columnName, displayName) => {\r\n    return (\r\n      <React.Fragment>\r\n        <a\r\n          href=\"/#\"\r\n          onClick={(event) => {\r\n            onSortColumnNameClick(event, columnName);\r\n          }}\r\n        >\r\n          {displayName}\r\n        </a>{\" \"}\r\n        {sortBy === columnName && sortOrder === \"ASC\" ? (\r\n          <i className=\"fa fa-sort-up\"></i>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {sortBy === columnName && sortOrder === \"DESC\" ? (\r\n          <i className=\"fa fa-sort-down\"></i>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"row p-3 header\">\r\n          <div className=\"col-lg-3\">\r\n            <h4>\r\n              <i className=\"fa fa-suitcase\"></i>&nbsp; Products &nbsp;\r\n              <span className=\"badge badge-secondary text-dark\">\r\n                {products.length}\r\n              </span>\r\n            </h4>\r\n          </div>\r\n          <div className=\"col-lg-9\">\r\n          <input\r\n              type=\"search\"\r\n              value={search}\r\n              placeholder=\"Search\"\r\n              className=\"form-control\"\r\n              autoFocus=\"autofocus\"\r\n              onChange={(event) => {\r\n                setSearch(event.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"col-lg-10 mx-auto mb-2\">\r\n        <div className=\"card my-2 shadow\">\r\n          <div className=\"card-body\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                <th>{getColumnHeader(\"productName\", \"Product Name\")}</th>\r\n                  <th>{getColumnHeader(\"price\", \"Price\")}</th>\r\n                  <th>{getColumnHeader(\"brand\", \"Brand\")}</th>\r\n                  <th>{getColumnHeader(\"category\", \"Category\")}</th>\r\n                  <th>{getColumnHeader(\"rating\", \"Rating\")}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {products.map((product) => {\r\n                  return (\r\n                    <tr key={product.id}>\r\n                     \r\n                      <td>{product.productName}</td>\r\n                      <td>{product.price}</td>\r\n                      <td>{product.brand.brandName}</td>\r\n                      <td>{product.category.categoryName}</td>\r\n                      <td>{\r\n                      [...Array(product.rating).keys()].map((n) => {\r\n                        return <i className=\"fa fa-star text-warning\" key={n}></i>;\r\n                      })\r\n                        }\r\n                        {\r\n                             [...Array(5 - product.rating).keys()].map((n) => {\r\n                                return <i className=\"fa fa-star text-dark\" key={n}></i>;\r\n                              })\r\n                        }\r\n                        </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n",{"ruleId":"81","severity":1,"message":"82","line":9,"column":8,"nodeType":"83","messageId":"84","endLine":9,"endColumn":29},{"ruleId":"81","severity":1,"message":"85","line":10,"column":8,"nodeType":"83","messageId":"84","endLine":10,"endColumn":28},{"ruleId":"81","severity":1,"message":"86","line":4,"column":44,"nodeType":"83","messageId":"84","endLine":4,"endColumn":59},{"ruleId":"81","severity":1,"message":"87","line":122,"column":11,"nodeType":"83","messageId":"84","endLine":122,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":122,"column":36,"nodeType":"90","messageId":"91","endLine":122,"endColumn":38},{"ruleId":"81","severity":1,"message":"92","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":15},"no-unused-vars","'showOrderDeletedAlert' is assigned a value but never used.","Identifier","unusedVar","'showOrderPlacedAlert' is assigned a value but never used.","'ProductsService' is defined but never used.","'prods' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Product' is defined but never used."]