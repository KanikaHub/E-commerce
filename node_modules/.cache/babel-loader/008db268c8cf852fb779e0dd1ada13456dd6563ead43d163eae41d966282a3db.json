{"ast":null,"code":"var _jsxFileName = \"E:\\\\sahiltinku\\\\appcode\\\\e-commerce\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  var [email, setEmail] = useState(\"\");\n  var [password, setPassword] = useState(\"\");\n  let [errors, setErrors] = useState({\n    email: [],\n    password: []\n  });\n  let [dirty, setDirty] = useState({\n    email: false,\n    password: false\n  });\n  let [loginMessage, setLoginMessage] = useState(\"\");\n\n  //executes only once - on initial render =  componentDidMount\n  useEffect(() => {\n    document.title = \"Login - eCommerce\";\n  }, []);\n\n  // a function to validate email and password\n  let validate = () => {\n    //variable to store errorsData\n    let errorsData = {};\n\n    //email\n    errorsData.email = [];\n    // condition 1\n    if (!email) {\n      errorsData.email.push(\"Email can't be blank\");\n    }\n    // condition 2\n    let validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\n    if (email) {\n      if (!validEmailRegex.test(email)) {\n        errorsData.email.push(\"Proper email address is expected\");\n      }\n    }\n    //password\n    errorsData.password = [];\n\n    //password can't blank\n    if (!password) {\n      errorsData.password.push(\"Password can't be blank\");\n    }\n    // condition2\n    let validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\n    if (password) {\n      if (!validPasswordRegex.test(password)) {\n        errorsData.password.push(\"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\");\n      }\n    }\n    setErrors(errorsData);\n  };\n  useEffect(validate, [email, password]);\n\n  //When the user clicks on Login button\n  let onLoginClick = async () => {\n    //set all controls as dirty\n\n    let dirtyData = dirty;\n    Object.keys(dirty).forEach(control => {\n      dirtyData[control] = true;\n    });\n    setDirty(dirtyData);\n\n    //call validate\n    validate();\n    if (isValid()) {\n      let response = await fetch(`http://localhost:5000/users?email=${email}&password=${password}`, {\n        method: \"GET\"\n      });\n      if (response.ok) {\n        let responseBody = await response.json();\n      } else {\n        setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-danger\",\n          children: \"Invalid Login, please try again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this));\n      }\n    } else {\n      setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-danger\",\n        children: \"Unable to connect to server\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this));\n    }\n  };\n  let isValid = () => {\n    let valid = true;\n    //reading all controls from errors\n    for (let control in errors) {\n      if (errors[control].length > 0) valid = false;\n    }\n    return valid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-lg-5 col-md-7 mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card border-primary shadow-lg my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header border-bottom border-success\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              fontSize: \"40px\"\n            },\n            className: \"text-primary text-center\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body border-bottom border-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"email\",\n              name: \"email\",\n              placeholder: \"Email\",\n              value: email,\n              onChange: e => {\n                setEmail(e.target.value);\n              },\n              onBlur: () => {\n                setDirty({\n                  ...dirty,\n                  email: true\n                });\n                validate();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger\",\n              children: dirty[\"email\"] && errors[\"email\"][0] ? errors[\"email\"] : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control\",\n              id: \"password\",\n              name: \"password\",\n              placeholder: \"Password\",\n              value: password,\n              onChange: e => {\n                setPassword(e.target.value);\n              },\n              onBlur: () => {\n                setDirty({\n                  ...dirty,\n                  password: true\n                });\n                validate();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger\",\n              children: dirty[\"password\"] && errors[\"password\"][0] ? errors[\"password\"] : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-footer text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-1\",\n            children: loginMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success m-2\",\n            onClick: onLo,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"3tHnCF9ghg72O9YAURDZaMuUWDI=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","Login","email","setEmail","password","setPassword","errors","setErrors","dirty","setDirty","loginMessage","setLoginMessage","document","title","validate","errorsData","push","validEmailRegex","test","validPasswordRegex","onLoginClick","dirtyData","Object","keys","forEach","control","isValid","response","fetch","method","ok","responseBody","json","valid","length","fontSize","e","target","value","onLo"],"sources":["E:/sahiltinku/appcode/e-commerce/src/Login.js"],"sourcesContent":["import React,{useState, useEffect} from 'react'\r\n\r\nconst Login = () => {\r\n  var [email, setEmail] = useState(\"\");\r\n  var [password, setPassword] = useState(\"\");\r\n\r\n\r\n  let [errors, setErrors] = useState( {email: [], password: []} );\r\n\r\n  let [dirty, setDirty] = useState({\r\n    email: false,\r\n    password: false,\r\n  });\r\n\r\n  let [loginMessage, setLoginMessage] = useState(\"\");\r\n\r\n //executes only once - on initial render =  componentDidMount\r\n useEffect(() => {\r\n  document.title = \"Login - eCommerce\";\r\n}, []);\r\n\r\n// a function to validate email and password\r\nlet validate = ()=>{\r\n  //variable to store errorsData\r\n  let errorsData = {};\r\n\r\n//email\r\nerrorsData.email = [];\r\n// condition 1\r\nif(!email){\r\n  errorsData.email.push(\"Email can't be blank\")\r\n}\r\n// condition 2\r\nlet validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\nif(email){\r\nif(!validEmailRegex.test(email)){\r\n  errorsData.email.push(\"Proper email address is expected\")\r\n}\r\n}\r\n//password\r\nerrorsData.password = [];\r\n\r\n//password can't blank\r\nif (!password) {\r\n  errorsData.password.push(\"Password can't be blank\");\r\n}\r\n// condition2\r\nlet validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\r\nif (password) {\r\n  if (!validPasswordRegex.test(password)) {\r\n    errorsData.password.push(\r\n      \"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\"\r\n    );\r\n  }\r\n}\r\nsetErrors(errorsData)\r\n\r\n}\r\n\r\nuseEffect(validate, [email, password]);\r\n\r\n //When the user clicks on Login button\r\n let onLoginClick = async()=>{\r\n   //set all controls as dirty\r\n\r\n   let dirtyData = dirty;\r\n   Object.keys(dirty).forEach((control) => {\r\n     dirtyData[control] = true;\r\n   });\r\n   setDirty(dirtyData);\r\n\r\n//call validate\r\nvalidate();\r\n\r\nif(isValid()){\r\n\r\n  let response = await fetch(   `http://localhost:5000/users?email=${email}&password=${password}`,{method:\"GET\"})\r\n  if(response.ok){\r\n    let responseBody = await response.json()\r\n  }else{\r\n    setLoginMessage(\r\n      <span className=\"text-danger\">Invalid Login, please try again</span>\r\n    );\r\n  }\r\n}else{\r\n  setLoginMessage(\r\n    <span className=\"text-danger\">Unable to connect to server</span>\r\n  );\r\n}\r\n\r\n\r\n }\r\n\r\nlet isValid=()=>{\r\n  let valid=true\r\n   //reading all controls from errors\r\n   for (let control in errors) {\r\n    if (errors[control].length > 0) valid = false;\r\n  }\r\n\r\n  return valid;\r\n}\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className=\"col-lg-5 col-md-7 mx-auto\">\r\n        <div className=\"card border-primary shadow-lg my-2\">\r\n          <div className=\"card-header border-bottom border-success\">\r\n          <h4\r\n              style={{ fontSize: \"40px\" }}\r\n              className=\"text-primary text-center\"\r\n            >\r\n              Login\r\n            </h4>\r\n\r\n          </div>\r\n       \r\n          <div className=\"card-body border-bottom border-success\">\r\n               {/* col for email */}\r\n            <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input \r\n            type='text' \r\n            className=\"form-control\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e)=>{\r\n              setEmail(e.target.value)\r\n            }}\r\n         onBlur={\r\n          ()=>{\r\n            setDirty({...dirty,email:true})\r\n            validate()\r\n          }\r\n\r\n         }\r\n            />\r\n            <div className=\"text-danger\">\r\n              {dirty[\"email\"] && errors[\"email\"][0] ?errors[\"email\"] : \"\" }\r\n            </div>\r\n            </div>\r\n               {/* email ends  */}\r\n               <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input \r\n            type='password' \r\n            className=\"form-control\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e)=>{\r\n              setPassword(e.target.value)\r\n            }}\r\n\r\n             onBlur={\r\n          ()=>{\r\n            setDirty({...dirty,password:true})\r\n            validate()\r\n          }\r\n\r\n         }\r\n            />\r\n            <div className=\"text-danger\">\r\n              {dirty[\"password\"] && errors[\"password\"][0] ?errors[\"password\"] : \"\" }\r\n            </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"card-footer text-center\">\r\n            <div className=\"m-1\">{loginMessage}</div>\r\n            <button className=\"btn btn-success m-2\" onClick={onLo\r\n            } >\r\n              Login\r\n            </button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}