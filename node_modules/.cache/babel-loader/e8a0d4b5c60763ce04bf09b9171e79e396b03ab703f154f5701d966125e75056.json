{"ast":null,"code":"var _jsxFileName = \"E:\\\\sahiltinku\\\\appcode\\\\e-commerce\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  var [email, setEmail] = useState(\"\");\n  var [password, setPassword] = useState(\"\");\n  let [dirty, setDirty] = useState({\n    email: false,\n    password: false\n  });\n  let [errors, setErrors] = useState({\n    email: [],\n    password: []\n  });\n  let [loginMessage, setLoginMessage] = useState(\"\");\n\n  //executes only once - on initial render =  componentDidMount\n  useEffect(() => {\n    document.title = \"Login - eCommerce\";\n  }, []);\n  const validate = () => {\n    let errorsData = {};\n    errorsData.email = [];\n    //email can't blank\n    if (!email) {\n      errorsData.email.push(\"Email can't be blank\");\n    }\n\n    //email regex\n    let validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\n    if (email) {\n      if (!validEmailRegex.test(email)) {\n        errorsData.email.push(\"Proper email address is expected\");\n      }\n    }\n\n    //password\n    errorsData.password = [];\n\n    //password can't blank\n    if (!password) {\n      errorsData.password.push(\"Password can't be blank\");\n    }\n\n    //password regex\n    let validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\n    if (password) {\n      if (!validPasswordRegex.test(password)) {\n        errorsData.password.push(\"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\");\n      }\n    }\n    setErrors(errorsData);\n  };\n  useEffect(validate, [email, password]);\n  const onLoginClick = async () => {\n    //set all controls as dirty\n    let dirtyData = dirty;\n    Object.keys(dirty).forEach(control => {\n      dirtyData[control] = true;\n    });\n    setDirty(dirtyData);\n\n    //call validate\n    validate();\n    if (isValid()) {\n      let response = await fetch(`http://localhost:5500/users?email=${email}&password=${password}`, {\n        method: \"GET\"\n      });\n      if (response.ok) {\n        let responseBody = await response.json();\n      } else {\n        setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-danger\",\n          children: \"Invalid Login, please try again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }, this));\n      }\n    } else {\n      setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-danger\",\n        children: \"Unable to connect to server\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this));\n    }\n  };\n  let isValid = () => {\n    let valid = true;\n\n    //reading all controls from errors\n    for (let control in errors) {\n      if (errors[control].length > 0) valid = false;\n    }\n    return valid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-lg-5 col-md-7 mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card border-success shadow-lg my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header border-bottom border-success\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              fontSize: \"40px\"\n            },\n            className: \"text-success text-center\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body border-bottom border-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"email\",\n              id: \"email\",\n              className: \"form-control\",\n              value: \"\",\n              placeholder: \"Enter Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              name: \"password\",\n              id: \"password\",\n              className: \"form-control\",\n              placeholder: \"Enter Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-footer text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-1\",\n            children: \"message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success m-2\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"doK9WJGeqaAQ3U1tcW7dDj9uHTQ=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Login","email","setEmail","useState","password","setPassword","dirty","setDirty","errors","setErrors","loginMessage","setLoginMessage","useEffect","document","title","validate","errorsData","push","validEmailRegex","test","validPasswordRegex","onLoginClick","dirtyData","Object","keys","forEach","control","isValid","response","fetch","method","ok","responseBody","json","valid","length","fontSize"],"sources":["E:/sahiltinku/appcode/e-commerce/src/Login.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Login = () => {\r\n\r\n  var [email, setEmail] = useState(\"\");\r\n  var [password, setPassword] = useState(\"\");\r\n\r\n  let [dirty, setDirty] = useState({\r\n    email: false,\r\n    password: false,\r\n  });\r\n\r\n  let [errors, setErrors] = useState({\r\n    email: [],\r\n    password: [],\r\n  });\r\n\r\n  let [loginMessage, setLoginMessage] = useState(\"\");\r\n\r\n  //executes only once - on initial render =  componentDidMount\r\n  useEffect(() => {\r\n    document.title = \"Login - eCommerce\";\r\n  }, []);\r\n\r\nconst validate = ()=>{\r\n  let errorsData = {}\r\n  errorsData.email= []\r\n      //email can't blank\r\n      if (!email) {\r\n        errorsData.email.push(\"Email can't be blank\");\r\n      }\r\n  \r\n      //email regex\r\n      let validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n      if (email) {\r\n        if (!validEmailRegex.test(email)) {\r\n          errorsData.email.push(\"Proper email address is expected\");\r\n        }\r\n      }\r\n\r\n         //password\r\n    errorsData.password = [];\r\n\r\n    //password can't blank\r\n    if (!password) {\r\n      errorsData.password.push(\"Password can't be blank\");\r\n    }\r\n\r\n    //password regex\r\n    let validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\r\n    if (password) {\r\n      if (!validPasswordRegex.test(password)) {\r\n        errorsData.password.push(\r\n          \"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\"\r\n        );\r\n      }\r\n    }\r\n\r\n    setErrors(errorsData)\r\n\r\n}\r\nuseEffect(validate, [email, password]);\r\n\r\nconst onLoginClick =async()=>{\r\n      //set all controls as dirty\r\n      let dirtyData = dirty;\r\n      Object.keys(dirty).forEach((control) => {\r\n        dirtyData[control] = true;\r\n      });\r\n      setDirty(dirtyData);\r\n  \r\n      //call validate\r\n      validate();\r\nif(isValid()){\r\n  let response = await fetch(\r\n    `http://localhost:5500/users?email=${email}&password=${password}`,\r\n    { method: \"GET\" }\r\n  );\r\n  if(response.ok){\r\n    let responseBody = await response.json();\r\n  }else{\r\n    setLoginMessage(\r\n      <span className=\"text-danger\">Invalid Login, please try again</span>\r\n    );\r\n  }\r\n}\r\nelse{\r\n  setLoginMessage(\r\n    <span className=\"text-danger\">Unable to connect to server</span>\r\n  );\r\n}\r\n\r\n}\r\n\r\nlet isValid = () => {\r\n  let valid = true;\r\n\r\n  //reading all controls from errors\r\n  for (let control in errors) {\r\n    if (errors[control].length > 0) valid = false;\r\n  }\r\n\r\n  return valid;\r\n};\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-lg-5 col-md-7 mx-auto\">\r\n      <div className=\"card border-success shadow-lg my-2\">\r\n      <div className=\"card-header border-bottom border-success\">\r\n      <h4 style={{ fontSize: \"40px\" }} className=\"text-success text-center\" >\r\n              Login\r\n            </h4> \r\n\r\n      </div>\r\n\r\n<div className=\"card-body border-bottom border-success\">\r\n  {/* email */}\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"email\">Email</label>\r\n    <input type=\"text\" name=\"email\" id=\"email\" className='form-control'value=\"\" placeholder='Enter Email' />\r\n   \r\n  </div>\r\n  {/* password */}\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"password\">Password</label>\r\n    <input type=\"password\" name=\"password\" id=\"password\" className='form-control' placeholder='Enter Password'/>\r\n   \r\n  </div>\r\n</div>\r\n{/* footer */}\r\n<div className=\"card-footer text-center\">\r\n  <div className=\"m-1\">message</div>\r\n  <button className='btn btn-success m-2'>Login</button>\r\n</div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}