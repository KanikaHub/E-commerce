{"ast":null,"code":"var _jsxFileName = \"E:\\\\twinkle\\\\appcode\\\\e-commerce\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { uc } from \"./UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet Login = props => {\n  _s();\n  const nav = useNavigate();\n  var ur = useContext(uc);\n  var [email, setEmail] = useState(\"scott@test.com\");\n  var [password, setPassword] = useState(\"Scott123\");\n  let [dirty, setDirty] = useState({\n    email: false,\n    password: false\n  });\n  let [errors, setErrors] = useState({\n    email: [],\n    password: []\n  });\n  let [loginMessage, setLoginMessage] = useState(\"\");\n\n  //executes on each render (initial render & state updates)\n  useEffect(() => {\n    //console.log(email, password);\n  });\n\n  //executes only on state updates of \"email\" only (and also with initial render)\n  useEffect(() => {\n    //validation on email only\n    if (email.indexOf(\"@\") > 0) {\n      //console.log(\"valid\");\n    } else {\n      //console.log(\"invalid\");\n    }\n  }, [email]);\n\n  //executes only once - on initial render =  componentDidMount\n  useEffect(() => {\n    document.title = \"Login - eCommerce\";\n  }, []);\n\n  //executes only once - on component unmounting phase = componentWillUnmount\n  useEffect(() => {\n    //do something\n    return () => {\n      console.log(\"Component Unmount\");\n    };\n  }, []);\n\n  //a function to validate email and password\n  let validate = () => {\n    //variable to store errorsData\n    let errorsData = {};\n\n    //email\n    errorsData.email = [];\n\n    //email can't blank\n    if (!email) {\n      errorsData.email.push(\"Email can't be blank\");\n    }\n\n    //email regex\n    let validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\n    if (email) {\n      if (!validEmailRegex.test(email)) {\n        errorsData.email.push(\"Proper email address is expected\");\n      }\n    }\n\n    //password\n    errorsData.password = [];\n\n    //password can't blank\n    if (!password) {\n      errorsData.password.push(\"Password can't be blank\");\n    }\n\n    //password regex\n    let validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\n    if (password) {\n      if (!validPasswordRegex.test(password)) {\n        errorsData.password.push(\"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\");\n      }\n    }\n    setErrors(errorsData);\n  };\n  useEffect(validate, [email, password]);\n\n  //When the user clicks on Login button\n  let onLoginClick = async () => {\n    //set all controls as dirty\n    let dirtyData = dirty;\n    Object.keys(dirty).forEach(control => {\n      dirtyData[control] = true;\n    });\n    setDirty(dirtyData);\n\n    //call validate\n    validate();\n    if (isValid()) {\n      let response = await fetch(`http://localhost:5500/users?email=${email}&password=${password}`, {\n        method: \"GET\"\n      });\n      if (response.ok) {\n        //Status code is 200\n        let responseBody = await response.json();\n        if (responseBody.length > 0) {\n          setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-success\",\n            children: \"SUCCESS LOGIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this));\n          ur.setUser({\n            ...ur.user,\n            isLoggedIn: true,\n            currentUserName: responseBody[0].fullName,\n            currentUserId: responseBody[0].id,\n            currentUserRole: responseBody[0].role\n          });\n          nav('/dashboard');\n        } else {\n          setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-danger\",\n            children: \"Invalid Login, please try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this));\n        }\n      } else {\n        setLoginMessage( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-danger\",\n          children: \"Unable to connect to server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this));\n      }\n    }\n  };\n  let isValid = () => {\n    let valid = true;\n\n    //reading all controls from errors\n    for (let control in errors) {\n      if (errors[control].length > 0) valid = false;\n    }\n    return valid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-lg-5 col-md-7 mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card border-success shadow-lg my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header border-bottom border-success\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              fontSize: \"40px\"\n            },\n            className: \"text-success text-center\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body border-bottom border-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"email\",\n              name: \"email\",\n              value: email,\n              onChange: event => {\n                setEmail(event.target.value);\n              },\n              onBlur: () => {\n                setDirty({\n                  ...dirty,\n                  email: true\n                });\n                validate();\n              },\n              placeholder: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger\",\n              children: dirty[\"email\"] && errors[\"email\"][0] ? errors[\"email\"] : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control\",\n              id: \"password\",\n              name: \"password\",\n              value: password,\n              placeholder: \"Password\",\n              onChange: event => {\n                setPassword(event.target.value);\n              },\n              onBlur: () => {\n                setDirty({\n                  ...dirty,\n                  password: true\n                });\n                validate();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger\",\n              children: dirty[\"password\"] && errors[\"password\"][0] ? errors[\"password\"] : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-footer text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-1\",\n            children: loginMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success m-2\",\n            onClick: onLoginClick,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"5uuQMEa+76A9zcrIEwQtOUlz8L8=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useContext","uc","useNavigate","Login","props","nav","ur","email","setEmail","password","setPassword","dirty","setDirty","errors","setErrors","loginMessage","setLoginMessage","indexOf","document","title","console","log","validate","errorsData","push","validEmailRegex","test","validPasswordRegex","onLoginClick","dirtyData","Object","keys","forEach","control","isValid","response","fetch","method","ok","responseBody","json","length","setUser","user","isLoggedIn","currentUserName","fullName","currentUserId","id","currentUserRole","role","valid","fontSize","event","target","value"],"sources":["E:/twinkle/appcode/e-commerce/src/Login.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { uc } from \"./UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nlet Login = (props) => {\r\n\r\nconst nav = useNavigate();\r\n\r\n  var ur=useContext(uc)\r\n  var [email, setEmail] = useState(\"scott@test.com\");\r\n  var [password, setPassword] = useState(\"Scott123\");\r\n\r\n  let [dirty, setDirty] = useState({\r\n    email: false,\r\n    password: false,\r\n  });\r\n\r\n  let [errors, setErrors] = useState({\r\n    email: [],\r\n    password: [],\r\n  });\r\n\r\n  let [loginMessage, setLoginMessage] = useState(\"\");\r\n\r\n  //executes on each render (initial render & state updates)\r\n  useEffect(() => {\r\n    //console.log(email, password);\r\n  });\r\n\r\n  //executes only on state updates of \"email\" only (and also with initial render)\r\n  useEffect(() => {\r\n    //validation on email only\r\n    if (email.indexOf(\"@\") > 0) {\r\n      //console.log(\"valid\");\r\n    } else {\r\n      //console.log(\"invalid\");\r\n    }\r\n  }, [email]);\r\n\r\n  //executes only once - on initial render =  componentDidMount\r\n  useEffect(() => {\r\n    document.title = \"Login - eCommerce\";\r\n  }, []);\r\n\r\n  //executes only once - on component unmounting phase = componentWillUnmount\r\n  useEffect(() => {\r\n    //do something\r\n    return () => {\r\n      console.log(\"Component Unmount\");\r\n    };\r\n  }, []);\r\n\r\n  //a function to validate email and password\r\n  let validate = () => {\r\n    //variable to store errorsData\r\n    let errorsData = {};\r\n\r\n    //email\r\n    errorsData.email = [];\r\n\r\n    //email can't blank\r\n    if (!email) {\r\n      errorsData.email.push(\"Email can't be blank\");\r\n    }\r\n\r\n    //email regex\r\n    let validEmailRegex = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n    if (email) {\r\n      if (!validEmailRegex.test(email)) {\r\n        errorsData.email.push(\"Proper email address is expected\");\r\n      }\r\n    }\r\n\r\n    //password\r\n    errorsData.password = [];\r\n\r\n    //password can't blank\r\n    if (!password) {\r\n      errorsData.password.push(\"Password can't be blank\");\r\n    }\r\n\r\n    //password regex\r\n    let validPasswordRegex = /((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15})/;\r\n    if (password) {\r\n      if (!validPasswordRegex.test(password)) {\r\n        errorsData.password.push(\r\n          \"Password should be 6 to 15 characters long with at least one uppercase letter, one lowercase letter and one digit\"\r\n        );\r\n      }\r\n    }\r\n\r\n    setErrors(errorsData);\r\n  };\r\n\r\n  useEffect(validate, [email, password]);\r\n\r\n  //When the user clicks on Login button\r\n  let onLoginClick = async () => {\r\n    //set all controls as dirty\r\n    let dirtyData = dirty;\r\n    Object.keys(dirty).forEach((control) => {\r\n      dirtyData[control] = true;\r\n    });\r\n    setDirty(dirtyData);\r\n\r\n    //call validate\r\n    validate();\r\n\r\n    if (isValid()) {\r\n      let response = await fetch(\r\n        `http://localhost:5500/users?email=${email}&password=${password}`,\r\n        { method: \"GET\" }\r\n      );\r\n      if (response.ok) {\r\n        //Status code is 200\r\n        let responseBody = await response.json();\r\n        if (responseBody.length > 0) {\r\n          setLoginMessage(\r\n            <span className=\"text-success\">SUCCESS LOGIN</span>\r\n          );\r\nur.setUser({\r\n  ...ur.user,isLoggedIn: true,\r\n  currentUserName: responseBody[0].fullName,\r\n  currentUserId: responseBody[0].id,\r\n  currentUserRole : responseBody[0].role\r\n})\r\nnav('/dashboard')\r\n        } else {\r\n          setLoginMessage(\r\n            <span className=\"text-danger\">Invalid Login, please try again</span>\r\n          );\r\n        }\r\n      } else {\r\n        setLoginMessage(\r\n          <span className=\"text-danger\">Unable to connect to server</span>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  let isValid = () => {\r\n    let valid = true;\r\n\r\n    //reading all controls from errors\r\n    for (let control in errors) {\r\n      if (errors[control].length > 0) valid = false;\r\n    }\r\n\r\n    return valid;\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-lg-5 col-md-7 mx-auto\">\r\n        <div className=\"card border-success shadow-lg my-2\">\r\n          <div className=\"card-header border-bottom border-success\">\r\n            <h4\r\n              style={{ fontSize: \"40px\" }}\r\n              className=\"text-success text-center\"\r\n            >\r\n              Login\r\n            </h4>\r\n          </div>\r\n\r\n          <div className=\"card-body border-bottom border-success\">\r\n            {/* email starts */}\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={(event) => {\r\n                  setEmail(event.target.value);\r\n                }}\r\n                onBlur={() => {\r\n                  setDirty({ ...dirty, email: true });\r\n                  validate();\r\n                }}\r\n                placeholder=\"Email\"\r\n              />\r\n\r\n              <div className=\"text-danger\">\r\n                {dirty[\"email\"] && errors[\"email\"][0] ? errors[\"email\"] : \"\"}\r\n              </div>\r\n            </div>\r\n            {/* email ends  */}\r\n\r\n            {/* password starts */}\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                placeholder=\"Password\"\r\n                onChange={(event) => {\r\n                  setPassword(event.target.value);\r\n                }}\r\n                onBlur={() => {\r\n                  setDirty({ ...dirty, password: true });\r\n                  validate();\r\n                }}\r\n              />\r\n\r\n              <div className=\"text-danger\">\r\n                {dirty[\"password\"] && errors[\"password\"][0]\r\n                  ? errors[\"password\"]\r\n                  : \"\"}\r\n              </div>\r\n            </div>\r\n            {/* password ends  */}\r\n          </div>\r\n\r\n          <div className=\"card-footer text-center\">\r\n            <div className=\"m-1\">{loginMessage}</div>\r\n            <button className=\"btn btn-success m-2\" onClick={onLoginClick}>\r\n              Login\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}