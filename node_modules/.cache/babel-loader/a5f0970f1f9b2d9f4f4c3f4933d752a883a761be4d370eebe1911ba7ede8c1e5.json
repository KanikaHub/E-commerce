{"ast":null,"code":"var _jsxFileName = \"E:\\\\twinkle\\\\appcode\\\\e-commerce\\\\src\\\\Store.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { uc } from './UserContext';\nimport { useContext } from 'react';\nimport { BrandsService } from './Service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Store = () => {\n  _s();\n  let ur = useContext(uc);\n  const [brands, setbrands] = useState([]);\n  useEffect(async () => {\n    // get brands from db\n    let brandsResponse = await BrandsService.fetchBrands();\n    let brandsResponseBody = brandsResponse.json();\n    brandsResponseBody.forEach(brand => {\n      brand.isChecked = true;\n    });\n    setbrands(brandsResponseBody);\n    // get categories from db\n    let categoriesResponse = await CategoriesService.fet;\n    let categoriesResponseBody = categoriesResponse.json();\n    categoriesResponseBody.forEach(category => {\n      category.isChecked = true;\n    });\n    setbrands(brandsResponseBody);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Store\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Store, \"PJ9iUCh68vHw3chP49luMpyAyrI=\");\n_c = Store;\nexport default Store;\nvar _c;\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"names":["React","useEffect","uc","useContext","BrandsService","Store","ur","brands","setbrands","useState","brandsResponse","fetchBrands","brandsResponseBody","json","forEach","brand","isChecked","categoriesResponse","CategoriesService","fet","categoriesResponseBody","category"],"sources":["E:/twinkle/appcode/e-commerce/src/Store.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport {uc} from './UserContext'\r\nimport { useContext } from 'react'\r\nimport { BrandsService } from './Service';\r\nconst Store = () => {\r\n    let ur = useContext (uc);\r\n    const [brands,setbrands]= useState([])\r\n\r\n    useEffect(async()=>{\r\n\r\n        // get brands from db\r\nlet brandsResponse = await BrandsService.fetchBrands()\r\nlet brandsResponseBody = brandsResponse.json()\r\nbrandsResponseBody.forEach(brand => {\r\n    brand.isChecked = true\r\n});\r\nsetbrands(brandsResponseBody);\r\n// get categories from db\r\nlet categoriesResponse = await CategoriesService.fet\r\nlet categoriesResponseBody = categoriesResponse.json()\r\ncategoriesResponseBody.forEach(category => {\r\n    category.isChecked = true\r\n});\r\nsetbrands(brandsResponseBody);\r\n    },[])\r\n  return (\r\n    <div>Store</div>\r\n  )\r\n}\r\n\r\nexport default Store"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAQC,EAAE,QAAO,eAAe;AAChC,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,aAAa,QAAQ,WAAW;AAAC;AAC1C,MAAMC,KAAK,GAAG,MAAM;EAAA;EAChB,IAAIC,EAAE,GAAGH,UAAU,CAAED,EAAE,CAAC;EACxB,MAAM,CAACK,MAAM,EAACC,SAAS,CAAC,GAAEC,QAAQ,CAAC,EAAE,CAAC;EAEtCR,SAAS,CAAC,YAAS;IAEf;IACR,IAAIS,cAAc,GAAG,MAAMN,aAAa,CAACO,WAAW,EAAE;IACtD,IAAIC,kBAAkB,GAAGF,cAAc,CAACG,IAAI,EAAE;IAC9CD,kBAAkB,CAACE,OAAO,CAACC,KAAK,IAAI;MAChCA,KAAK,CAACC,SAAS,GAAG,IAAI;IAC1B,CAAC,CAAC;IACFR,SAAS,CAACI,kBAAkB,CAAC;IAC7B;IACA,IAAIK,kBAAkB,GAAG,MAAMC,iBAAiB,CAACC,GAAG;IACpD,IAAIC,sBAAsB,GAAGH,kBAAkB,CAACJ,IAAI,EAAE;IACtDO,sBAAsB,CAACN,OAAO,CAACO,QAAQ,IAAI;MACvCA,QAAQ,CAACL,SAAS,GAAG,IAAI;IAC7B,CAAC,CAAC;IACFR,SAAS,CAACI,kBAAkB,CAAC;EACzB,CAAC,EAAC,EAAE,CAAC;EACP,oBACE;IAAA,UAAK;EAAK;IAAA;IAAA;IAAA;EAAA,QAAM;AAEpB,CAAC;AAAA,GAxBKP,KAAK;AAAA,KAALA,KAAK;AA0BX,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}